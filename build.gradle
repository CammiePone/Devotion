plugins {
	id 'maven-publish'
	alias(libs.plugins.quilt.loom)
}

archivesBaseName = project.archives_base_name
version = project.version
group = project.maven_group

repositories {
	maven { url "https://maven.shedaniel.me" }
	maven { url "https://maven.terraformersmc.com" }
	maven { url "https://ladysnake.jfrog.io/artifactory/mods" }
	maven { url "https://maven.willbl.dev/releases" }
	maven { url "https://jitpack.io" }
	maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
	maven { url "https://api.modrinth.com/maven" }
}

// All the dependencies are declared at gradle/libs.version.toml and referenced with "libs.<id>"
dependencies {
	minecraft libs.minecraft
	mappings loom.layered {
		addLayer quiltMappings.mappings("org.quiltmc:quilt-mappings:${libs.versions.quilt.mappings.get()}:v2")
	}

	modImplementation libs.quilt.loader
	modImplementation libs.quilted.fabric.api
	modImplementation libs.cca.base
	modImplementation libs.cca.entity
	modImplementation libs.cca.world
	modImplementation libs.cca.chunk
	modImplementation libs.modmenu
	modImplementation libs.satin
	modImplementation libs.early.features
	modImplementation libs.midnightlib
//    modImplementation include(libs.blabber)

	implementation libs.mixinextras
	annotationProcessor libs.mixinextras
	include libs.mixinextras
	include libs.early.features
//    include libs.lucko.perms
}

configurations.all {
	resolutionStrategy.dependencySubstitution {
		substitute module('net.fabricmc:fabric-loader') using module(libs.quilt.loader.get().toString())
		all { DependencySubstitution dependency ->
			if (dependency.requested instanceof ModuleComponentSelector && dependency.requested.group == 'net.fabricmc.fabric-api') {
				if (dependency.requested.module == 'fabric-api')
					dependency.useTarget libs.quilted.fabric.api.get().toString()
				else
					dependency.useTarget 'org.quiltmc.quilted-fabric-api' + ':' + dependency.requested.module + ':' + libs.versions.quilted.fabric.api.get()
			}
		}
	}
}

processResources {
	inputs.property "version", version

	filesMatching('quilt.mod.json') {
		expand "version": version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Still required by IDEs such as Eclipse and Visual Studio Code
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17

	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	// If this mod is going to be a library, then it should also generate Javadocs in order to aid with developement.
	// Uncomment this line to generate them.
	// withJavadocJar()
}

// If you plan to use a different file for the license, don't forget to change the file name here!
jar {
	from("LICENSE") {
		rename { "${it}_${archivesBaseName}" }
	}
}

loom {
	accessWidenerPath = file("src/main/resources/arcanus.accesswidener")
}

// Configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
